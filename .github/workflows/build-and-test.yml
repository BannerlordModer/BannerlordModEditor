name: Build and Test

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ master, main ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore Dependencies
      run: dotnet restore
      
    - name: Build Solution
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Run Common Tests
      run: dotnet test BannerlordModEditor.Common.Tests --configuration ${{ matrix.configuration }} --no-build --verbosity normal --logger "trx;LogFileName=common_tests.trx"
      
    - name: Run UI Tests
      run: dotnet test BannerlordModEditor.UI.Tests --configuration ${{ matrix.configuration }} --no-build --verbosity normal --logger "trx;LogFileName=ui_tests.trx"
      
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.configuration }}
        path: |
          *.trx
          TestResults/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore Dependencies
      run: dotnet restore
      
    - name: Security Scan
      run: |
        echo "# Security Scan Report" > security-report.txt
        echo "## Scan Time: $(date)" >> security-report.txt
        echo "" >> security-report.txt
        echo "### Package Vulnerability Scan" >> security-report.txt
        dotnet list package --vulnerable --include-transitive >> security-report.txt 2>&1 || echo "No vulnerabilities found" >> security-report.txt
        echo "" >> security-report.txt
        echo "### Deprecated Packages Scan" >> security-report.txt
        dotnet list package --deprecated >> security-report.txt 2>&1 || echo "No deprecated packages found" >> security-report.txt
        
    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-report.txt

  coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore Dependencies
      run: dotnet restore
      
    - name: Build Solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run Tests with Coverage
      run: |
        dotnet test BannerlordModEditor.Common.Tests --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory TestResults
        dotnet test BannerlordModEditor.UI.Tests --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory TestResults
      
    - name: Generate Coverage Report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        if [ -f "TestResults/**/coverage.cobertura.xml" ]; then
          reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:coverage -reporttypes:Html
        else
          echo "No coverage files found, skipping coverage report generation"
          mkdir -p coverage
          echo "<html><body><h1>Coverage Report Not Generated</h1><p>No coverage files found</p></body></html>" > coverage/index.html
        fi
        
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/