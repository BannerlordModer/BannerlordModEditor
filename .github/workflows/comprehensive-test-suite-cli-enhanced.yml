name: Comprehensive Test Suite (CLI Enhanced)

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  TEST_PROJECT_PATH: 'BannerlordModEditor.Common.Tests'
  UI_TEST_PROJECT_PATH: 'BannerlordModEditor.UI.Tests'

jobs:
  # 1. 构建验证 - 确保所有项目能够成功编译
  build-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: |
        if ! dotnet build --configuration Release --no-restore; then
          echo "构建失败，需要修复编译错误"
          exit 1
        fi
        
    - name: 验证TestData文件
      run: |
        echo "验证TestData文件..."
        if [ ! -d "BannerlordModEditor.Common.Tests/TestData" ]; then
          echo "错误: Common.Tests TestData目录不存在"
          exit 1
        fi
        
        # 检查XML文件数量
        xml_count=$(find BannerlordModEditor.Common.Tests/TestData -name "*.xml" | wc -l)
        echo "Common.Tests TestData中的XML文件数量: $xml_count"
        
        if [ $xml_count -eq 0 ]; then
          echo "错误: Common.Tests TestData中没有XML文件"
          exit 1
        fi

  # 2. 单元测试 - 核心功能测试
  unit-tests:
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行单元测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults \
          --logger "trx;LogFileName=unit_tests.trx"
          
    - name: 上传测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          TestResults/
          *.trx
        
    - name: 生成覆盖率报告
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        # 查找所有覆盖率文件并生成报告
        if [ -f "TestResults/**/coverage.cobertura.xml" ]; then
          reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:TestResults/CoverageReport -reporttypes:Html
        else
          echo "未找到覆盖率文件，跳过覆盖率报告生成"
          mkdir -p TestResults/CoverageReport
          echo "<html><body><h1>覆盖率报告未生成</h1><p>未找到覆盖率文件</p></body></html>" > TestResults/CoverageReport/index.html
        fi
      if: always()
        
    - name: 上传覆盖率报告
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/CoverageReport/

  # 3. CLI集成测试
  cli-integration-tests:
    runs-on: ubuntu-latest
    needs: [build-validation, unit-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 验证CLI集成测试数据
      run: |
        echo "验证CLI集成测试数据..."
        if [ ! -d "BannerlordModEditor.Common.Tests/TestData" ]; then
          echo "错误: CLI集成测试数据目录不存在"
          exit 1
        fi
        
        # 检查必要的XML文件
        required_files=("action_types.xml" "combat_parameters.xml" "map_icons.xml")
        for file in "${required_files[@]}"; do
          if [ ! -f "BannerlordModEditor.Common.Tests/TestData/$file" ]; then
            echo "错误: 缺少测试文件: $file"
            exit 1
          fi
        done
        
        echo "✓ CLI集成测试数据验证通过"
      
    - name: 运行CLI集成测试
      run: |
        dotnet test BannerlordModEditor.Cli.IntegrationTests \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --results-directory TestResults \
          --logger "trx;LogFileName=cli_integration_tests.trx"
          
    - name: 上传CLI集成测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cli-integration-test-results
        path: |
          TestResults/
          *.trx

  # 4. TUI集成测试
  tui-integration-tests:
    runs-on: ubuntu-latest
    needs: [build-validation, unit-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 安装tmux
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux
        
    - name: 验证tmux安装
      run: |
        tmux -V
        echo "tmux installation verified"
        tmux new-session -d -s test-session
        tmux send-keys -t test-session "echo 'Tmux test session created'" Enter
        tmux capture-pane -t test-session -p
        tmux kill-session -t test-session
        echo "tmux functionality verified"
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 创建TUI测试数据
      run: |
        echo "创建TUI测试数据..."
        dotnet run --project BannerlordModEditor.TUI.UATTests -- create-test-data
        
    - name: 运行TUI测试
      run: |
        dotnet test BannerlordModEditor.TUI.Tests \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --results-directory TestResults \
          --logger "trx;LogFileName=tui_tests.trx"
          
    - name: 运行Tmux集成测试
      run: |
        dotnet test BannerlordModEditor.TUI.TmuxTest \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --results-directory TestResults \
          --logger "trx;LogFileName=tmux_tests.trx"
          
    - name: 上传TUI测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: tui-test-results
        path: |
          TestResults/
          *.trx

  # 5. UAT测试
  uat-tests:
    runs-on: ubuntu-latest
    needs: [build-validation, unit-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 验证UAT测试项目
      run: |
        echo "验证UAT测试项目..."
        # 检查UAT测试项目是否能够编译
        if [ ! -d "BannerlordModEditor.TUI.UATTests" ]; then
          echo "错误: TUI.UATTests项目目录不存在"
          exit 1
        fi
        
        if [ ! -d "BannerlordModEditor.Cli.UATTests" ]; then
          echo "错误: Cli.UATTests项目目录不存在"
          exit 1
        fi
        
    - name: 运行TUI UAT测试
      run: |
        dotnet test BannerlordModEditor.TUI.UATTests \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --results-directory TestResults \
          --logger "trx;LogFileName=tui_uat_tests.trx"
          
    - name: 运行CLI UAT测试
      run: |
        dotnet test BannerlordModEditor.Cli.UATTests \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --results-directory TestResults \
          --logger "trx;LogFileName=cli_uat_tests.trx"
          
    - name: 上传UAT测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: uat-test-results
        path: |
          TestResults/
          *.trx

  # 6. UI测试
  ui-tests:
    runs-on: ubuntu-latest
    needs: [build-validation, unit-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 安装Xvfb
      run: sudo apt-get update && sudo apt-get install -y xvfb
      
    - name: 运行UI测试
      run: |
        xvfb-run --auto-servernum dotnet test ${{ env.UI_TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --results-directory TestResults \
          --logger "trx;LogFileName=ui_tests.trx"
          
    - name: 上传UI测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-results
        path: |
          TestResults/
          *.trx

  # 7. 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 运行安全扫描
      run: |
        echo "开始安全扫描..."
        
        # 检查漏洞包
        echo "检查漏洞包..."
        vulnerable_output=$(dotnet list package --vulnerable --include-transitive 2>&1)
        echo "$vulnerable_output"
        
        # 检查是否有真正的漏洞
        if echo "$vulnerable_output" | grep -q "易受攻击的包\|vulnerable"; then
          echo "发现安全漏洞，阻止PR合并"
          echo "漏洞详情:"
          echo "$vulnerable_output" | grep -E "易受攻击的包|vulnerable"
          exit 1
        fi
        
        echo "✓ 未发现安全漏洞"
        
        # 检查已弃用包
        echo "检查已弃用包..."
        deprecated_output=$(dotnet list package --deprecated 2>&1)
        echo "$deprecated_output"
        
        # 检查弃用包警告
        if echo "$deprecated_output" | grep -q "已弃用\|deprecated"; then
          echo "⚠ 发现已弃用包，发出警告"
          echo "弃用包详情:"
          echo "$deprecated_output" | grep -E "已弃用|deprecated"
        else
          echo "✓ 未发现已弃用包"
        fi
        
        # 清理缓存
        echo "清理NuGet缓存..."
        dotnet nuget locals all --clear || echo "NuGet缓存清理失败，但不影响安全扫描结果"
        
        echo "安全扫描完成"
        
    - name: 生成安全报告
      shell: pwsh
      run: |
        Write-Output "# 安全扫描报告" | Out-File -FilePath "security-report.txt" -Encoding utf8
        Write-Output "## 扫描时间: $(Get-Date)" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "### 扫描结果" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "- **状态**: 通过" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "- **漏洞数量**: 0" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "- **已弃用包**: 已检查" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "### 建议" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "- 定期更新依赖包" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "- 监控新的安全漏洞" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        Write-Output "- 及时处理已弃用包" | Out-File -FilePath "security-report.txt" -Encoding utf8 -Append
        
    - name: 上传安全扫描结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-report.txt

  # 8. 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    needs: [build-validation, unit-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行性能测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Performance" \
          --results-directory TestResults \
          --logger "trx;LogFileName=performance_tests.trx"
          
    - name: 上传性能测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          TestResults/
          *.trx

  # 9. 测试汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, cli-integration-tests, tui-integration-tests, uat-tests, ui-tests, security-scan, performance-tests]
    if: always()
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载所有测试结果
      uses: actions/download-artifact@v4
      
    - name: 生成综合测试报告
      run: |
        echo "# 综合测试报告" > comprehensive-test-report.md
        echo "" >> comprehensive-test-report.md
        echo "## 测试执行时间: $(date)" >> comprehensive-test-report.md
        echo "" >> comprehensive-test-report.md
        
        # 汇总各测试结果
        for result_dir in unit-test-results cli-integration-test-results tui-test-results uat-test-results ui-test-results performance-test-results; do
          if [ -d "$result_dir" ]; then
            echo "### ${result_dir//-/ }" >> comprehensive-test-report.md
            echo "\`\`\`" >> comprehensive-test-report.md
            find "$result_dir" -name "*.trx" -exec echo "处理文件: {}" \; 2>/dev/null || echo "未找到.trx文件" >> comprehensive-test-report.md
            echo "\`\`\`" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
          fi
        done
        
        # 安全扫描结果
        if [ -f "security-scan-results/security-report.txt" ]; then
          echo "### 安全扫描结果" >> comprehensive-test-report.md
          echo "\`\`\`" >> comprehensive-test-report.md
          cat security-scan-results/security-report.txt >> comprehensive-test-report.md
          echo "\`\`\`" >> comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
        fi
        
        echo "## 测试覆盖率" >> comprehensive-test-report.md
        if [ -f "unit-test-results/TestResults/CoverageReport/index.html" ]; then
          echo "覆盖率报告已生成" >> comprehensive-test-report.md
        else
          echo "- 覆盖率报告未生成" >> comprehensive-test-report.md
        fi
        
        echo "" >> comprehensive-test-report.md
        echo "## 构建信息" >> comprehensive-test-report.md
        echo "- GitHub Run ID: ${{ github.run_id }}" >> comprehensive-test-report.md
        echo "- GitHub Run Number: ${{ github.run_number }}" >> comprehensive-test-report.md
        echo "- 分支: ${{ github.ref_name }}" >> comprehensive-test-report.md
        echo "- 提交: ${{ github.sha }}" >> comprehensive-test-report.md

        
    - name: 上传综合测试报告
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: comprehensive-test-report.md
        
    - name: 查找所有.trx文件
      run: |
        echo "查找所有.trx文件:"
        find . -name "*.trx" -type f
        echo "当前目录结构:"
        ls -la

  # 10. 部署准备
  deployment-prep:
    runs-on: ubuntu-latest
    needs: [unit-tests, cli-integration-tests, tui-integration-tests, uat-tests, ui-tests, security-scan, performance-tests]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建发布版本
      run: |
        dotnet publish BannerlordModEditor.UI \
          --configuration Release \
          --framework net9.0 \
          --self-contained true \
          --runtime linux-x64 \
          -o publish/linux-x64
          
    - name: 打包发布版本
      run: |
        cd publish
        tar -czf BannerlordModEditor-linux-x64.tar.gz linux-x64/
        
    - name: 上传发布包
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: publish/*.tar.gz