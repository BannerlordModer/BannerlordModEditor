name: Comprehensive Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  TEST_PROJECT_PATH: 'BannerlordModEditor.Common.Tests'
  UI_TEST_PROJECT_PATH: 'BannerlordModEditor.UI.Tests'

jobs:
  # 1. 单元测试 - 核心功能测试
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行单元测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults \
          --logger "trx;LogFileName=unit_tests.trx"
          
    - name: 上传测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          TestResults/
          *.trx
        
    - name: 生成覆盖率报告
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        # 查找所有覆盖率文件并生成报告
        reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:TestResults/CoverageReport -reporttypes:Html
        
    - name: 上传覆盖率报告
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/CoverageReport/

  # 2. 集成测试 - XML适配测试
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行集成测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Integration" \
          --logger "trx;LogFileName=integration_tests.trx"
          
    - name: 上传集成测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          TestResults/
          *.trx

  # 3. 性能测试 - 质量监控测试
  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行性能测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Performance" \
          --logger "trx;LogFileName=performance_tests.trx"
          
    - name: 上传性能测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          TestResults/
          *.trx

  # 4. 错误处理测试 - 边界条件测试
  error-handling-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行错误处理测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=ErrorHandling" \
          --logger "trx;LogFileName=error_handling_tests.trx"
          
    - name: 上传错误处理测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: error-handling-test-results
        path: |
          TestResults/
          *.trx

  # 5. 并发测试 - 线程安全测试
  concurrency-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行并发测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Concurrency" \
          --logger "trx;LogFileName=concurrency_tests.trx"
          
    - name: 上传并发测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: concurrency-test-results
        path: |
          TestResults/
          *.trx

  # 6. 回归测试 - 历史问题测试
  regression-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行回归测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Regression" \
          --logger "trx;LogFileName=regression_tests.trx"
          
    - name: 上传回归测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: regression-test-results
        path: |
          TestResults/
          *.trx

  # 7. 大型XML文件测试
  large-xml-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行大型XML测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=LargeXml" \
          --logger "trx;LogFileName=large_xml_tests.trx"
          
    - name: 上传大型XML测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: large-xml-test-results
        path: |
          TestResults/
          *.trx

  # 8. 内存监控测试
  memory-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 运行内存测试
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Memory" \
          --logger "trx;LogFileName=memory_tests.trx"
          
    - name: 上传内存测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: memory-test-results
        path: |
          TestResults/
          *.trx

  # 9. UI测试
  ui-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建项目
      run: dotnet build --configuration Release --no-restore
      
    - name: 安装Xvfb
      run: sudo apt-get update && sudo apt-get install -y xvfb
      
    - name: 运行UI测试
      run: |
        xvfb-run --auto-servernum dotnet test ${{ env.UI_TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger "trx;LogFileName=ui_tests.trx"
          
    - name: 上传UI测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-results
        path: |
          TestResults/
          *.trx

  # 10. 测试报告汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, error-handling-tests, concurrency-tests, regression-tests, large-xml-tests, memory-tests, ui-tests]
    if: always()
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载所有测试结果
      uses: actions/download-artifact@v4
      
    - name: 生成测试汇总报告
      run: |
        echo "# 测试执行汇总报告" > test-summary.md
        echo "" >> test-summary.md
        echo "## 测试执行时间: $(date)" >> test-summary.md
        echo "" >> test-summary.md
        
        # 汇总各测试结果
        if [ -d "unit-test-results" ]; then
          echo "### 单元测试结果" >> test-summary.md
          echo "\`\`\`" >> test-summary.md
          find unit-test-results -name "*.trx" -exec echo "处理文件: {}" \; 2>/dev/null || echo "未找到.trx文件" >> test-summary.md
          echo "\`\`\`" >> test-summary.md
          echo "" >> test-summary.md
        fi
        
        if [ -d "integration-test-results" ]; then
          echo "### 集成测试结果" >> test-summary.md
          echo "\`\`\`" >> test-summary.md
          find integration-test-results -name "*.trx" -exec echo "处理文件: {}" \; 2>/dev/null || echo "未找到.trx文件" >> test-summary.md
          echo "\`\`\`" >> test-summary.md
          echo "" >> test-summary.md
        fi
        
        if [ -d "ui-test-results" ]; then
          echo "### UI测试结果" >> test-summary.md
          echo "\`\`\`" >> test-summary.md
          find ui-test-results -name "*.trx" -exec echo "处理文件: {}" \; 2>/dev/null || echo "未找到.trx文件" >> test-summary.md
          echo "\`\`\`" >> test-summary.md
          echo "" >> test-summary.md
        fi
        
        echo "## 测试覆盖率" >> test-summary.md
        if [ -f "unit-test-results/TestResults/CoverageReport/index.html" ]; then
          echo "覆盖率报告已生成" >> test-summary.md
        else
          echo "覆盖率报告未生成" >> test-summary.md
        fi
        
    - name: 查找所有.trx文件
      run: |
        echo "查找所有.trx文件:"
        find . -name "*.trx" -type f
        echo "当前目录结构:"
        ls -la
        
    - name: 上传测试汇总报告
      uses: actions/upload-artifact@v4
      with:
        name: test-summary-report
        path: test-summary.md
        
    - name: 发布测试结果
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: BannerlordModEditor Tests
        path: '**/*.trx'
        reporter: java-junit
        fail-on-error: false

  # 11. 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 运行安全扫描
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet nuget locals all --clear
        
    - name: 运行代码分析
      run: |
        dotnet build --configuration Release
        
    - name: 生成安全报告
      run: |
        echo "# 安全扫描报告" > security-report.txt
        echo "## 扫描时间: $(date)" >> security-report.txt
        echo "" >> security-report.txt
        echo "### 包漏洞扫描" >> security-report.txt
        dotnet list package --vulnerable --include-transitive >> security-report.txt 2>&1 || echo "未发现漏洞" >> security-report.txt
        echo "" >> security-report.txt
        echo "### 已弃用包扫描" >> security-report.txt
        dotnet list package --deprecated >> security-report.txt 2>&1 || echo "未发现弃用包" >> security-report.txt
        
    - name: 上传安全扫描结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          security-report.txt
          bin/Release/

  # 12. 部署准备
  deployment-prep:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, error-handling-tests, concurrency-tests, regression-tests, large-xml-tests, memory-tests, ui-tests, security-scan]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 恢复依赖
      run: dotnet restore
      
    - name: 构建发布版本
      run: |
        dotnet publish BannerlordModEditor.UI \
          --configuration Release \
          --framework net9.0 \
          --self-contained true \
          --runtime linux-x64 \
          -o publish/linux-x64
          
    - name: 打包发布版本
      run: |
        cd publish
        tar -czf BannerlordModEditor-linux-x64.tar.gz linux-x64/
        
    - name: 上传发布包
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: publish/*.tar.gz