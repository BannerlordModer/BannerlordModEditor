using Xunit;
using Xunit.Abstractions;
using BannerlordModEditor.Cli.Commands;
using BannerlordModEditor.Common.Services;
using Microsoft.Extensions.DependencyInjection;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.Threading.Tasks;

namespace BannerlordModEditor.Cli.Tests
{
    public class CommandHandlerTests
    {
        private readonly ITestOutputHelper _output;
        private readonly IServiceProvider _serviceProvider;
        private readonly CliCommandManager _commandManager;

        public CommandHandlerTests(ITestOutputHelper output)
        {
            _output = output;
            
            // 设置依赖注入服务
            var services = new ServiceCollection();
            services.AddTransient<IFileDiscoveryService, FileDiscoveryService>();
            _serviceProvider = services.BuildServiceProvider();
            
            _commandManager = new CliCommandManager(_serviceProvider);
        }

        [Fact]
        public async Task HandleListCommand_WithNonExistentDirectory_ShouldHandleGracefully()
        {
            // Arrange
            var xmlDir = "/non/existent/directory";
            var adaptedOnly = false;
            var unadaptedOnly = false;

            // Act & Assert
            // 这些方法内部处理异常，不会抛出异常
            await TestPrivateMethod<CliCommandManager>("HandleListCommand", _commandManager, xmlDir, adaptedOnly, unadaptedOnly);
            // 如果没有抛出异常，说明异常处理正常工作
        }

        [Fact]
        public async Task HandleCheckCommand_WithNonExistentFile_ShouldHandleGracefully()
        {
            // Arrange
            var file = "/non/existent/file.xml";
            var verbose = false;

            // Act & Assert
            // 这些方法内部处理异常，不会抛出异常
            await TestPrivateMethod<CliCommandManager>("HandleCheckCommand", _commandManager, file, verbose);
            // 如果没有抛出异常，说明异常处理正常工作
        }

        [Fact]
        public async Task HandleTestCommand_WithNonExistentFile_ShouldHandleGracefully()
        {
            // Arrange
            var file = "/non/existent/file.xml";
            var modelType = "TestModel";

            // Act & Assert
            // 这些方法内部处理异常，不会抛出异常
            await TestPrivateMethod<CliCommandManager>("HandleTestCommand", _commandManager, file, modelType);
            // 如果没有抛出异常，说明异常处理正常工作
        }

        [Fact]
        public async Task HandleDiscoverCommand_ShouldWorkWithoutOutputFile()
        {
            // Arrange
            var xmlDir = ".";
            string? output = null;

            // Act & Assert
            // 注意：这个测试可能会因为实际的文件系统状态而失败
            // 在实际环境中，这应该正常工作而不抛出异常
            try
            {
                await TestPrivateMethod<CliCommandManager>("HandleDiscoverCommand", _commandManager, xmlDir, output);
            }
            catch (Exception ex)
            {
                // 如果是因为文件系统相关的问题，可以认为是预期的
                _output.WriteLine($"预期的异常：{ex.Message}");
            }
        }

        /// <summary>
        /// 测试私有方法的辅助方法
        /// </summary>
        private static Task TestPrivateMethod<T>(string methodName, T instance, params object[] parameters)
        {
            var method = typeof(T).GetMethod(methodName, System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (method == null)
            {
                throw new System.ArgumentException($"Method {methodName} not found on type {typeof(T).Name}");
            }
            
            return (Task)method.Invoke(instance, parameters)!;
        }
    }
}