name: XML适配状态检查工具测试套件

on:
  push:
    branches: [ main, master, develop, feature/* ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: '测试类型'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
      generate_coverage:
        description: '生成覆盖率报告'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'scripts/XmlAdaptationChecker'
  TEST_RESULTS_DIR: 'test-results'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置.NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: '**/packages.lock.json'
        
    - name: 恢复依赖
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 构建项目
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: 创建测试结果目录
      run: mkdir -p ${{ env.TEST_RESULTS_DIR }}
      
    - name: 运行单元测试
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == ''
      run: |
        dotnet test ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --logger "trx;LogFileName=${{ env.TEST_RESULTS_DIR }}/unit-tests.trx" \
          --logger "console;verbosity=minimal" \
          --collect:"XPlat Code Coverage" \
          --results-directory ${{ env.TEST_RESULTS_DIR }} \
          --filter "TestCategory!=Integration&TestCategory!=Performance"
      
    - name: 运行集成测试
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == ''
      run: |
        dotnet test ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --logger "trx;LogFileName=${{ env.TEST_RESULTS_DIR }}/integration-tests.trx" \
          --logger "console;verbosity=minimal" \
          --filter "TestCategory=Integration"
      
    - name: 运行性能测试
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == ''
      run: |
        dotnet test ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --logger "trx;LogFileName=${{ env.TEST_RESULTS_DIR }}/performance-tests.trx" \
          --logger "console;verbosity=minimal" \
          --filter "TestCategory=Performance"
      
    - name: 生成覆盖率报告
      if: github.event.inputs.generate_coverage == 'true' || github.event.inputs.generate_coverage == ''
      run: |
        # 安装reportgenerator
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.0
        
        # 生成HTML覆盖率报告
        reportgenerator \
          -reports:${{ env.TEST_RESULTS_DIR }}/coverage.xml \
          -targetdir:${{ env.TEST_RESULTS_DIR }}/coverage-report \
          -reporttypes:HtmlInline_AzurePipelines
      
    - name: 上传测试结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: ${{ env.TEST_RESULTS_DIR }}/
        retention-days: 30
        
    - name: 发布测试结果
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: XML适配检查器测试结果
        path: '${{ env.TEST_RESULTS_DIR }}/*.trx'
        reporter: dotnet-trx
        
    - name: 发布覆盖率报告
      if: github.event.inputs.generate_coverage == 'true' || github.event.inputs.generate_coverage == ''
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.run_number }}
        path: ${{ env.TEST_RESULTS_DIR }}/coverage-report/
        retention-days: 30
        
    - name: 检查测试结果
      run: |
        # 检查是否有失败的测试
        if find ${{ env.TEST_RESULTS_DIR }} -name "*.trx" -exec grep -l "Failed" {} \; | grep -q .; then
          echo "## 发现失败的测试"
          find ${{ env.TEST_RESULTS_DIR }} -name "*.trx" -exec grep -l "Failed" {} \; | while read file; do
            echo "失败文件: $file"
            grep -A 5 -B 5 "Failed" "$file" || true
          done
          exit 1
        fi
        
        echo "所有测试通过！"

  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置.NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: '**/packages.lock.json'
        
    - name: 恢复依赖
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 运行代码分析
      run: |
        # 检查代码风格
        dotnet format ${{ env.PROJECT_PATH }} --verify-no-changes --verbosity diagnostic
        
    - name: 检查安全漏洞
      run: |
        # 使用dotnet list package检查已知漏洞
        dotnet list package ${{ env.PROJECT_PATH }} --vulnerable --include-transitive
        
    - name: 检查过时的包
      run: |
        # 检查过时的NuGet包
        dotnet list package ${{ env.PROJECT_PATH }} --outdated

  performance-benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置.NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: '**/packages.lock.json'
        
    - name: 恢复依赖
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 构建项目
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: 运行性能基准测试
      run: |
        cd ${{ env.PROJECT_PATH }}
        
        # 创建性能测试结果目录
        mkdir -p ${{ env.TEST_RESULTS_DIR }}/benchmark
        
        # 运行性能测试并生成报告
        dotnet test \
          --configuration Release \
          --no-build \
          --logger "trx;LogFileName=${{ env.TEST_RESULTS_DIR }}/benchmark/benchmark-tests.trx" \
          --logger "console;verbosity=minimal" \
          --filter "TestCategory=Performance" \
          --results-directory ${{ env.TEST_RESULTS_DIR }}/benchmark
        
    - name: 上传性能测试结果
      uses: actions/upload-artifact@v4
      with:
        name: performance-results-${{ github.run_number }}
        path: ${{ env.TEST_RESULTS_DIR }}/benchmark/
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, performance-benchmark]
    if: always()
    
    steps:
    - name: 生成测试摘要
      run: |
        echo "# XML适配状态检查工具测试摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 测试执行状态" >> $GITHUB_STEP_SUMMARY
        echo "- **构建和测试**: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **代码质量**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **性能基准**: ${{ needs.performance-benchmark.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
          echo "✅ 所有核心测试通过" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 存在测试失败" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ 代码质量检查通过" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 代码质量检查失败" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.performance-benchmark.result }}" == "success" ]]; then
          echo "✅ 性能基准测试通过" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 性能基准测试失败" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 测试工件" >> $GITHUB_STEP_SUMMARY
        echo "- 测试结果: 下载名为 \`test-results-${{ github.run_number }}\` 的工件" >> $GITHUB_STEP_SUMMARY
        echo "- 覆盖率报告: 下载名为 \`coverage-report-${{ github.run_number }}\` 的工件" >> $GITHUB_STEP_SUMMARY
        echo "- 性能结果: 下载名为 \`performance-results-${{ github.run_number }}\` 的工件" >> $GITHUB_STEP_SUMMARY